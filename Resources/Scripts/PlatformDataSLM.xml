<?xml version="1.0" encoding="utf-8"?>
<Resource version="9.19.00" defaultSize="6" isCustom="false" fileVersion="1.0.0">
  
    <!-- 
    
      You can add custom scripts to the below and modify the existing ones if you want.  To format dates correctly in the Excel Export
      I recommend doing CONVERT(VARCHAR, DateColumn, 120) AS [DateColumn] - but it's up to you. :) 
      
      Ensure you change isCustom = false to isCustom = true on Line 2.  It's not currently used in Version 2.0, but it's to future proof
      your custom scripts not being overwritten in the future.
    
      To reset any changes, delete the file in the Data\Resources directory and it will be generated on the next data grab.
    
      Custom Script Examples:
    
      <tblComputerSize>
        SELECT COUNT(*) FROM [SnowLicenseManager].[dbo].tblComputer
      </tblComputerSize>
      <tblCustomerCount>
        SELECT 
          ci.Name AS [Customer]
          ,COUNT(co.CID) AS [Device Count] 
          ,cau.Units AS [Agreed Units] 
        FROM [SnowLicenseManager].[dbo].[tblCID] ci
        JOIN [SnowLicenseManager].[dbo].[tblComputer] co ON ci.CID = co.CID
        JOIN [SnowLicenseManager].[dbo].[tblCIDAgreementUnits] cau ON ci.CID = cau.CID
        GROUP BY ci.Name, cau.Units
      </tblCustomerCount>
    
    -->

  <IndexFragmentation comment="Script from www.sqlshack.com/how-to-identify-and-resolve-sql-server-index-fragmentation">
    USE [SnowLicenseManager]
    SELECT
      S.name as 'Schema',
      T.name as 'Table',
      I.name as 'Index',
      DDIPS.avg_fragmentation_in_percent,
      DDIPS.page_count
    FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL, NULL, NULL) AS DDIPS
    INNER JOIN sys.tables T on T.object_id = DDIPS.object_id
    INNER JOIN sys.schemas S on T.schema_id = S.schema_id
    INNER JOIN sys.indexes I ON I.object_id = DDIPS.object_id AND DDIPS.index_id = I.index_id
    WHERE DDIPS.database_id = DB_ID() and I.name is not null AND DDIPS.avg_fragmentation_in_percent > 0
    ORDER BY DDIPS.avg_fragmentation_in_percent desc
  </IndexFragmentation>

  <TableInformation comment="Script from www.ppolyzos.com/2016/11/22/get-size-of-tables-in-sql-server">
    USE [SnowLicenseManager];
    SELECT
      t.Name                                       AS TableName,
      s.Name                                       AS SchemaName,
      p.Rows                                       AS RowCounts,
      SUM(a.total_pages) * 8                       AS TotalSpaceKB,
      SUM(a.used_pages) * 8                        AS UsedSpaceKB,
      (SUM(a.total_pages) - SUM(a.used_pages)) * 8 AS UnusedSpaceKB
    FROM sys.tables t
    INNER JOIN sys.indexes i ON t.object_id = i.object_id
    INNER JOIN sys.partitions p ON i.object_id = p.object_id AND i.index_id = p.index_id
    INNER JOIN sys.allocation_units a ON p.partition_id = a.container_id
    LEFT OUTER JOIN sys.schemas s ON t.schema_id = s.schema_id
    WHERE t.Name NOT LIKE 'dt%' AND t.is_ms_shipped = 0 AND i.object_id > 255
    GROUP BY
    t.Name, s.Name, p.Rows
    ORDER BY
    p.rows DESC
  </TableInformation>

  <SQLServerInformation>
    SELECT
      @@SERVERNAME AS [SQL Server Name]
      ,@@SERVICENAME AS [SQL Service Name]
      ,SERVERPROPERTY('ComputerNamePhysicalNetBios') AS [Server Name]
      ,SERVERPROPERTY('InstanceName') AS [Instance Name]
      ,CASE
        WHEN SERVERPROPERTY('IsIntegratedSecurityOnly') = 1 THEN 'Windows Authentication'
        WHEN SERVERPROPERTY('IsIntegratedSecurityOnly') = 0 THEN 'SQL Server and Windows Authentication'
        ELSE NULL
      END AS [Authentication]
      ,(SELECT cpu_count FROM [sys].[dm_os_sys_info]) AS [CPU]
      ,(SELECT CONVERT(DECIMAL(2),ROUND([total_physical_memory_kb]/1024/1024,1)) FROM [sys].[dm_os_sys_memory]) AS [RAM (GB)]
      ,CASE
        WHEN CONVERT(VARCHAR, SERVERPROPERTY('ProductVersion')) LIKE '9%' THEN 'SQL Server 2005'
        WHEN CONVERT(VARCHAR, SERVERPROPERTY('ProductVersion')) LIKE '10.0%' THEN 'SQL Server 2008'
        WHEN CONVERT(VARCHAR, SERVERPROPERTY('ProductVersion')) LIKE '10.5%' THEN 'SQL Server 2008 R2'
        WHEN CONVERT(VARCHAR, SERVERPROPERTY('ProductVersion')) LIKE '11%' THEN 'SQL Server 2012'
        WHEN CONVERT(VARCHAR, SERVERPROPERTY('ProductVersion')) LIKE '12%' THEN 'SQL Server 2014'
        WHEN CONVERT(VARCHAR, SERVERPROPERTY('ProductVersion')) LIKE '14%' THEN 'SQL Server 2016'
        WHEN CONVERT(VARCHAR, SERVERPROPERTY('ProductVersion')) LIKE '15%' THEN 'SQL Server 2019'
        WHEN CONVERT(VARCHAR, SERVERPROPERTY('ProductVersion')) LIKE '16%' THEN 'SQL Server 2022'
        ELSE 'Unknown Version: ' + CONVERT(VARCHAR, SERVERPROPERTY('ProductVersion'))
      END AS [SQL Product Version]
      ,SERVERPROPERTY('Edition') AS [SQL Edition]
      ,SERVERPROPERTY('ProductLevel') AS [Service Pack]
      ,ISNULL(SERVERPROPERTY('ProductUpdateLevel'), 'N/A') as [Update Level]
      ,ISNULL(SERVERPROPERTY('ProductUpdateReference'), 'N/A') as [Update Reference]
      ,SERVERPROPERTY('IsClustered') AS [Clustered]
      ,SERVERPROPERTY('IsHadrEnabled') AS [HADR]
      ,(SELECT COUNT(*) FROM [sys].[databases] WHERE database_id > 4) AS [User Databases]
      ,(SELECT STUFF((SELECT ', ' + d.name FROM sys.databases AS d WHERE d.database_id > 4 FOR XML PATH('')), 1, 2, '')) AS [User Databases]
      ,SERVERPROPERTY('collation') AS [SQL Collation]
  </SQLServerInformation>
  
  <DatabaseInformation comment="Script modified from www.blog.sqlauthority.com/2010/11/12/sql-server-get-all-the-information-of-database-using-sys-databases">
    SELECT database_id,
      CONVERT(VARCHAR(25), DB.name) AS dbName,
      CONVERT(VARCHAR(10), DATABASEPROPERTYEX(name, 'status')) AS [Status],
      state_desc,
      (SELECT COUNT(1) FROM sys.master_files WHERE DB_NAME(database_id) = DB.name AND type_desc = 'rows') AS DataFiles,
      (SELECT SUM((size*8)/1024) FROM sys.master_files WHERE DB_NAME(database_id) = DB.name AND type_desc = 'rows') AS [Data MB],
      (SELECT COUNT(1) FROM sys.master_files WHERE DB_NAME(database_id) = DB.name AND type_desc = 'log') AS LogFiles,
      (SELECT SUM((size*8)/1024) FROM sys.master_files WHERE DB_NAME(database_id) = DB.name AND type_desc = 'log') AS [Log MB],
      user_access_desc AS [User access],
      recovery_model_desc AS [Recovery model],
      CASE compatibility_level
      WHEN 60 THEN '60 (SQL Server 6.0)'
      WHEN 65 THEN '65 (SQL Server 6.5)'
      WHEN 70 THEN '70 (SQL Server 7.0)'
      WHEN 80 THEN '80 (SQL Server 2000)'
      WHEN 90 THEN '90 (SQL Server 2005)'
      WHEN 100 THEN '100 (SQL Server 2008)'
      WHEN 110 THEN '110 (SQL Server 2012)'
      WHEN 120 THEN '120 (SQL Server 2014)'
      WHEN 130 THEN '130 (SQL Server 2016)'
      WHEN 140 THEN '140 (SQL Server 2017)'
      WHEN 150 THEN '150 (SQL Server 2019)'
      END AS [compatibility level],
      CONVERT(VARCHAR(20), create_date, 103) + ' ' + CONVERT(VARCHAR(20), create_date, 108) AS [Creation date],
      -- last backup
      ISNULL((SELECT TOP 1
      CASE TYPE WHEN 'D' THEN 'Full' WHEN 'I' THEN 'Differential' WHEN 'L' THEN 'Transaction log' END + ' – ' +
      LTRIM(ISNULL(STR(ABS(DATEDIFF(DAY, GETDATE(),Backup_finish_date))) + ' days ago', 'NEVER')) + ' – ' +
      CONVERT(VARCHAR(20), backup_start_date, 103) + ' ' + CONVERT(VARCHAR(20), backup_start_date, 108) + ' – ' +
      CONVERT(VARCHAR(20), backup_finish_date, 103) + ' ' + CONVERT(VARCHAR(20), backup_finish_date, 108) +
      ' (' + CAST(DATEDIFF(second, BK.backup_start_date,
      BK.backup_finish_date) AS VARCHAR(4)) + ' '
      + 'seconds)'
      FROM msdb..backupset BK WHERE BK.database_name = DB.name ORDER BY backup_set_id DESC),'-') AS [Last backup],
      CASE WHEN is_fulltext_enabled = 1 THEN 'Fulltext enabled' ELSE '' END AS [fulltext],
      CASE WHEN is_auto_close_on = 1 THEN 'autoclose' ELSE '' END AS [autoclose],
      page_verify_option_desc AS [page verify option],
      CASE WHEN is_read_only = 1 THEN 'read only' ELSE '' END AS [read only],
      CASE WHEN is_auto_shrink_on = 1 THEN 'autoshrink' ELSE '' END AS [autoshrink],
      CASE WHEN is_auto_create_stats_on = 1 THEN 'auto create statistics' ELSE '' END AS [auto create statistics],
      CASE WHEN is_auto_update_stats_on = 1 THEN 'auto update statistics' ELSE '' END AS [auto update statistics],
      CASE WHEN is_in_standby = 1 THEN 'standby' ELSE '' END AS [standby],
      CASE WHEN is_cleanly_shutdown = 1 THEN 'cleanly shutdown' ELSE '' END AS [cleanly shutdown] FROM sys.databases DB
      ORDER BY dbName, [Last backup] DESC, NAME
  </DatabaseInformation>

  <tblSystemInfo>
    SELECT
      LicenseKey
      ,CompanyName
      ,ApplicationVersion
      ,RequiredAdminToolVersion
      ,DBVersion
      ,CONVERT(VARCHAR, LastJobDate, 120) AS [LastJobDate]
      ,LastJobStatus
      ,CONVERT(VARCHAR, LastJobDuration, 120) AS [LastJobDuration]
      ,CONVERT(VARCHAR, LastJobResetRulesDate, 120) AS [LastJobResetRulesDate]
      ,ConversionDate
      ,ConversionInfo
      ,LicenseManagerUser
      ,LicenseManagerPassword
      ,SRSLicenseKey
      ,WebServiceInfo
      ,ActivationKey
      ,CoreValidation
      ,UpdateRevisionInstalled
      ,ReportDate
    FROM [SnowLicenseManager].[dbo].[tblSystemInfo]
  </tblSystemInfo>

  <tblSystemCustomProcedures>
    SELECT * FROM [SnowLicenseManager].[dbo].[tblSystemCustomProcedures]
  </tblSystemCustomProcedures>
  
</Resource>